handleClickOutsideOrEscape on Navrbar
/* 
    Conditional logic to determine whether the navigation links should be hidden:

    1. `(navRef.current && !navRef.current.contains(event.target as Node))`:
    - `navRef.current`: Checks if the `navRef` has been assigned to an actual DOM element.
        (This prevents errors if the ref is still `null`.)
    - `navRef.current.contains(event.target as Node)`:
        - Ensures that the `event.target` (the element clicked) is not inside the `<nav>` element.
        - `event.target` is cast to `Node` because `contains` expects a `Node` and not just any `EventTarget`.
        - The `!` operator negates the result, so the condition becomes true if the click happened *outside* the `<nav>` element.

    2. `(event instanceof KeyboardEvent && event.key === 'Escape')`:
    - `event instanceof KeyboardEvent`: Ensures that the `event` is a keyboard event before accessing its properties.
        (Prevents errors when the event is a `MouseEvent`, which doesn't have a `key` property.)
    - `event.key === 'Escape'`: Checks if the `Escape` key was pressed.

    3. Logical OR (`||`):
    - If *either* of the above conditions is true:
        - A click occurred outside the navigation bar, *or*
        - The Escape key was pressed,
        the navigation links should be hidden.

    4. `setShowNavLinks(false)`:
    - This updates the component state to hide the navigation links.
*/

2) On ScrollSlider.tsx component

{[...Array(6)].map((_, index) => (
          <div key={index} className="flex-shrink-0">
            {/* index % React.Children.count(children): This calculates the index of the child we want to render. 
            If the index exceeds the number of children, it "wraps around" to the start, effectively cycling through the children */}
            {React.Children.toArray(children)[index % React.Children.count(children)]}
          </div>
        ))}
Explanation of the Code:
[...Array(12)]: Creates an array with 12 elements, which we map over. Each iteration corresponds to an index (0-11).

React.Children.toArray(children): Converts the children prop into a flat array. This allows us to access individual child elements by their index.

React.Children.count(children): Returns the total number of children, which ensures that we don't try to access an out-of-bounds index.

index % React.Children.count(children): This calculates the index of the child we want to render. If the index exceeds the number of children, it "wraps around" to the start, effectively cycling through the children.


